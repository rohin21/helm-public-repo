name: Security Scan

on:
  push:
    branches: [main]
    paths:
      - 'charts/**'
  pull_request:
    paths:
      - 'charts/**'
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 0'

jobs:
  kubesec:
    runs-on: ubuntu-latest
    name: Kubesec Security Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Render templates and scan with Kubesec
        run: |
          for chart_dir in charts/*/; do
            if [[ -d "$chart_dir" ]]; then
              chart_name=$(basename "$chart_dir")
              echo "üîç Scanning $chart_name..."
              
              # Create a temporary directory for rendered templates
              mkdir -p /tmp/rendered-$chart_name
              
              # Render the chart templates
              helm template test-release "$chart_dir" \
                --output-dir /tmp/rendered-$chart_name \
                --values "$chart_dir/values.yaml" || {
                echo "‚ùå Failed to render templates for $chart_name"
                continue
              }
              
              # Scan rendered templates with kubesec
              find "/tmp/rendered-$chart_name" -name "*.yaml" -type f -exec \
                docker run --rm -v {}:/tmp/template.yaml kubesec/kubesec:latest scan /tmp/template.yaml \;
              
              echo "‚úÖ Completed security scan for $chart_name"
            fi
          done

  checkov:
    runs-on: ubuntu-latest
    name: Checkov Security Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov action
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: charts/
          framework: kubernetes,helm
          output_format: sarif
          output_file_path: reports/results.sarif
          quiet: true
          soft_fail: true

      - name: Upload Checkov results to GitHub Advanced Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: reports/results.sarif

  trivy:
    runs-on: ubuntu-latest
    name: Trivy Configuration Scan
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'charts/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  polaris:
    runs-on: ubuntu-latest
    name: Polaris Configuration Validation
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Install Polaris
        run: |
          curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz \
            | tar -xz polaris
          sudo mv polaris /usr/local/bin/

      - name: Run Polaris audit
        run: |
          for chart_dir in charts/*/; do
            if [[ -d "$chart_dir" ]]; then
              chart_name=$(basename "$chart_dir")
              echo "üîç Running Polaris audit for $chart_name..."
              
              # Render chart and audit with Polaris
              helm template test-release "$chart_dir" \
                --values "$chart_dir/values.yaml" | \
                polaris audit --audit-path - \
                --format pretty \
                --only-show-failed-tests false
            fi
          done